##
##	通用配置文件（Common Configuration (local_costmap) &(global_costmap)）
##		用来存储周围环境的障碍信息，其中需要注明地图关注的机器人传感器消息，以便于地图信息进行更行。
##


##	这两个参数用来设置代价地图中障碍物的相关阈值
##		obstacle_range参数用来设置机器人检测障碍物的最大范围，设置为2.5意为在2.5米范围内检测到的障碍信息，才会在地图中进行更新
##		raytrace_range参数用来设置机器人检测自由空间的最大范围，设置为3.0意为在3米范围内，机器人将根据传感器的信息，清除范围内的自由空间。
obstacle_range: 2.5
raytrace_range: 3.0


##	这些参数用来设置机器人在二维地图上的占用面积
##		如果机器人外形是圆形，则需要设置机器人的外形半径
##		所有参数以机器人的中心作为坐标（0，0）点
##		inflation_radius参数是设置障碍物的膨胀参数，也就是机器人应该与障碍物保持的最小安全距离
##		这里设置为0.55意为为机器人规划的路径应该与机器人保持0.55米以上的安全距离

## 	目前 smart car 的长宽为： 75cm x 60cm x 25cm
##				laserscaner			 :	6cmx6cmx9cm 基底高33cm  
##        轮胎厚度         ： 8cm
##        轮胎半径         ： 5cm(与车轴距 1cm)
footprint: [[0.375, 0.30], [0.375, -0.30], [-0.375, -0.30], [-0.375, 0.30]]
inflation_radius: 0.15 #default,0.55


max_obstacle_height: 0.6
min_obstacle_height: 0.0


## observation_sources参数列出了代价地图需要关注的所有传感器信息，每一个传感器信息都将在后边列出详细信息。
## i.e. observation_sources: laser_scan_sensor point_cloud_sensor
observation_sources: laser_scan_sensor
## 以激光雷达为例
##		sensor_frame标识传感器的参考系名称
##		data_type表示激光数据或者点云数据使用的消息类型
##		topic_name表示传感器发布的话题名称
##		marking和clearing参数用来表示是否需要使用传感器的实时信息来添加或清除代价地图中的障碍物信息

laser_scan_sensor: {
sensor_frame: laser, 
data_type: LaserScan, 
topic: /scan, 
marking: true, 
clearing: true, 
expected_update_rate: 0
}
